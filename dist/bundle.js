(()=>{var e={739:(e,s,t)=>{const r=t(185);t(142).config({path:process.cwd()+"/config/.env"}),e.exports=async()=>{r.set("strictQuery",!1),await r.connect(process.env.MONGO_URI),console.log("MongoDB is connected")}},790:(e,s,t)=>{const r=t(862),o=t(361),n=t(593);s.createUser=n((async(e,s,t)=>{const o=await r.create(e.body);s.status(201).json({success:!0,data:o})})),s.getUsers=n((async(e,s,t)=>{const o=await r.find();s.status(200).json({success:!0,data:o})})),s.getUser=n((async(e,s,t)=>{const{id:n}=e.params,a=await r.findById(n);if(!a)return t(new o("User not found",404));s.status(200).json({success:!0,data:a})})),s.updateUser=n((async(e,s,t)=>{const{id:n}=e.params;var a=await r.findById(n);if(!a)return t(new o("User not found",404));a=await r.findByIdAndUpdate(n,e.body,{new:!0,runValidators:!0}),s.status(200).json({success:!0,data:a})})),s.deleteUser=n((async(e,s,t)=>{const{id:n}=e.params;if(!await r.findById(n))return t(new o("User not found",404));await r.findByIdAndDelete(n),s.status(204).json({success:!0,data:{}})}))},593:e=>{e.exports=e=>(s,t,r)=>Promise.resolve(e(s,t,r)).catch(r)},435:(e,s,t)=>{const r=t(361);e.exports=(e,s,t,o)=>{let n={...e};if(n.message=e.message,"CastError"===e.name&&(n=new r("not uuid",400)),11e3===e.code&&(n=new r("Duplicate field value entered",400)),"ValidationError"===e.name){const s=Object.values(e.errors).map((e=>e.message));n=new r(s,400)}t.status(n.statusCode||500).json({success:!1,error:n.message||"Internal server error"})}},862:(e,s,t)=>{const r=t(185),o=new r.Schema({username:{type:String,required:[!0,"Please add username"]},age:{type:Number,required:[!0,"Please add an age"]},hobbies:{type:Array,required:[!0,"Please add a hobbies"],default:[]}});e.exports=r.model("User",o)},327:(e,s,t)=>{const r=t(860),{createUser:o,getUsers:n,getUser:a,updateUser:c,deleteUser:i}=t(790),d=r.Router();d.post("/",o),d.get("/",n),d.put("/:id",c),d.get("/:id",a),d.delete("/:id",i),e.exports=d},361:e=>{class s extends Error{constructor(e,s){super(e),this.statusCode=s}}e.exports=s},142:e=>{"use strict";e.exports=require("dotenv")},860:e=>{"use strict";e.exports=require("express")},185:e=>{"use strict";e.exports=require("mongoose")},470:e=>{"use strict";e.exports=require("morgan")},1:e=>{"use strict";e.exports=require("cluster")},37:e=>{"use strict";e.exports=require("os")}},s={};function t(r){var o=s[r];if(void 0!==o)return o.exports;var n=s[r]={exports:{}};return e[r](n,n.exports,t),n.exports}(()=>{const e=t(860),s=t(142),r=t(470),o=t(739),n=t(1),a=t(37),c=e();s.config({path:process.cwd()+"./config/.env"}),o(),c.use(e.json()),c.use(r("dev"));const i=t(327);c.use("/api/users",i),c.use(((e,s)=>{s.status(404).json({success:!1,error:"Not found"})}));const d=t(435);if(c.use(d),n.isMaster){const e=a.cpus().length;console.log(`Master ${process.pid} is running`);for(let s=0;s<e;s++)n.fork();n.on("exit",((e,s,t)=>{console.log(`worker ${e.process.pid} died`),n.fork()}));const s=Object.values(n.workers);let t=0;c.use(((e,r,o)=>{if(e.path.startsWith("/api")){const r=s[t];t=(t+1)%s.length,r.send(e)}else o()}))}else{const e=process.env.PORT||4e3;c.listen(e,(()=>{console.log(`Worker ${process.pid} is running on port ${e}`)}))}process.on("unhandledRejection",((e,s)=>{console.log(`Error: ${e.message}`.red),server.close((()=>process.exit(1)))}))})()})();